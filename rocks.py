from db import *
@dp.callback_query_handler(lambda c: c.data == 'kmn')
async def kmn(callback_query: types.CallbackQuery):
    message_id = callback_query.message.message_id
    user_id = callback_query.from_user.id

    keyboard = types.InlineKeyboardMarkup()
    buttons = [
        types.InlineKeyboardButton(text="üóø –ö–∞–º–µ–Ω—å", callback_data="rock"),
        types.InlineKeyboardButton(text="‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="scissors"),
        types.InlineKeyboardButton(text="üìÉ –ë—É–º–∞–≥–∞", callback_data="paper"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")
    ]
    keyboard.add(*buttons)

    await bot.edit_message_media(chat_id=user_id,
                                 message_id=message_id,
                                 media=types.InputMediaPhoto(media=open('kmn.jpg', 'rb'),
                                 caption="<b>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞.</b>\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:",
                                 parse_mode='HTML'),
                                 reply_markup=keyboard
    )
@dp.callback_query_handler(lambda c: c.data in ["rock", "scissors", "paper"])
async def kmn_start(callback_query: types.CallbackQuery):
    user_choice = callback_query.data
    message_id = callback_query.message.message_id
    user_id = callback_query.from_user.id

    await bot.edit_message_media(chat_id=user_id,
                                 message_id=message_id,
                                 media=types.InputMediaPhoto(media=open('kmn.jpg', 'rb'),
                                 caption=f"<b>–¢–µ–ø–µ—Ä—å —è –¥—É–º–∞—é —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å...</b>",
                                 parse_mode='HTML')
    )

    await asyncio.sleep(2)

    bot_choice = random.choice(["rock", "scissors", "paper"])

    choices = {
        "rock": "–∫–∞–º–µ–Ω—å",
        "scissors": "–Ω–æ–∂–Ω–∏—Ü—ãÔ∏è",
        "paper": "–±—É–º–∞–≥–∞"
    }

    if user_choice == bot_choice:
        result_text = f"<b>–ù–∏—á—å—è!</b>\n\n–¢–≤–æ–π —Ö–æ–¥: {choices[user_choice]}\n–ú–æ–π —Ö–æ–¥: {choices[bot_choice]}"
    elif (user_choice == "rock" and bot_choice == "scissors") or (user_choice == "scissors" and bot_choice == "paper") or (user_choice == "paper" and bot_choice == "rock"):
        await win(user_id, 'kmn')
        result_text = f"<b>–¢—ã –ø–æ–±–µ–¥–∏–ª!</b>\n\n–¢–≤–æ–π —Ö–æ–¥: {choices[user_choice]}\n–ú–æ–π —Ö–æ–¥: {choices[bot_choice]}"
    else:
        result_text = f"<b>–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!</b>\n\n–¢–≤–æ–π —Ö–æ–¥: {choices[user_choice]}\n–ú–æ–π —Ö–æ–¥: {choices[bot_choice]}"

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton(text="üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="kmn"),
        types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")
    ]
    keyboard.add(*buttons)

    await bot.edit_message_media(chat_id=user_id,
                                 message_id=message_id,
                                 media=types.InputMediaPhoto(media=open('kmn.jpg', 'rb'),
                                 caption=f"{result_text}\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                                 parse_mode='HTML'),
                                 reply_markup=keyboard
    )