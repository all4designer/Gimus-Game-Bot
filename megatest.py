from db import *

questions = [
    {
        'question': '–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?',
        'options': ['7', '8', '9', '10'],
        'correct_answer': '8'
    },
    {
        'question': '–ö–∞–∫–æ–µ —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∑–¥–∞–Ω–∏–µ –≤ –º–∏—Ä–µ?',
        'options': ['–®–∞–Ω—Ö–∞–π—Å–∫–∞—è –±–∞—à–Ω—è', '–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è', '–ë—É—Ä–¥–∂-–•–∞–ª–∏—Ñ–∞', '–õ–æ–Ω–¥–æ–Ω—Å–∫–∏–π –º–æ—Å—Ç'],
        'correct_answer': '–ë—É—Ä–¥–∂-–•–∞–ª–∏—Ñ–∞'
    },
    {
        'question': '–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª "–í–æ–π–Ω—É –∏ –º–∏—Ä"?',
        'options': ['–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', '–ò–≤–∞–Ω –¢—É—Ä–≥–µ–Ω–µ–≤', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω'],
        'correct_answer': '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π'
    },
    {
        'question': '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?',
        'options': ['–õ–æ–Ω–¥–æ–Ω', '–ú–∞–¥—Ä–∏–¥', '–ü–∞—Ä–∏–∂', '–†–∏–º'],
        'correct_answer': '–ü–∞—Ä–∏–∂'
    },
    {
        'question': '–ß—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥?',
        'options': ['–°–∏—Å—Ç–µ–º–∞ –∏—Å—á–∏—Å–ª–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 10', '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–°–∏—Å—Ç–µ–º–∞ –∏—Å—á–∏—Å–ª–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 2', '–°–ø–æ—Å–æ–± –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞'],
        'correct_answer': '–°–∏—Å—Ç–µ–º–∞ –∏—Å—á–∏—Å–ª–µ–Ω–∏—è —Å –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º 2'
    },
    {
        'question': '–ö—Ç–æ –∏–∑–æ–±—Ä–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω?',
        'options': ['–¢–æ–º–∞—Å –≠–¥–∏—Å–æ–Ω', '–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì—Ä–∞–º–±–µ–ª–ª—å', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–µ–ª–ª'],
        'correct_answer': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–µ–ª–ª'
    },
    {
        'question': '–ö–∞–∫–æ–π —Ö–∏–º–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º "Fe"?',
        'options': ['–§–æ—Å—Ñ–æ—Ä', '–ñ–µ–ª–µ–∑–æ', '–§—Ç–æ—Ä', '–§—Ä–∞–Ω—Ü–∏–π'],
        'correct_answer': '–ñ–µ–ª–µ–∑–æ'
    },
    {
        'question': '–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª "–ì–∞–º–ª–µ—Ç–∞"?',
        'options': ['–£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä', '–î–∂–µ–π–Ω –û—Å—Ç–∏–Ω', '–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π', '–ú–∞—Ä–∫ –¢–≤–µ–Ω'],
        'correct_answer': '–£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä'
    },
    {
        'question': '–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ –ø–ª–æ—â–∞–¥–∏?',
        'options': ['–¢–∏—Ö–∏–π', '–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π', '–ò–Ω–¥–∏–π—Å–∫–∏–π', '–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π'],
        'correct_answer': '–¢–∏—Ö–∏–π'
    },
    {
        'question': '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?',
        'options': ['–ù–∏–ª', '–ê–º–∞–∑–æ–Ω–∫–∞', '–ú–∏—Å—Å–∏—Å–∏–ø–∏', '–Ø–Ω—Ü–∑—ã'],
        'correct_answer': '–ê–º–∞–∑–æ–Ω–∫–∞'
    },
]

@dp.callback_query_handler(lambda c: c.data == 'megatest')
async def megatest(callback_query: types.CallbackQuery):
    message_id = callback_query.message.message_id
    chat_id = callback_query.from_user.id

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞', callback_data='start_megatest'))
    keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='start'))

    await bot.edit_message_media(chat_id=chat_id,
                                 message_id=message_id,
                                 media=types.InputMediaPhoto(media=open('megatest.jpg', 'rb'),
                                 caption="<b>–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?</b>\n\n–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—á–∞—Ç—å.\n\n–ù–∞—á–∏–Ω–∞–π –Ω–æ–≤—É—é –∏–≥—Ä—É:",
                                 parse_mode='HTML'),
                                 reply_markup=keyboard
    )
@dp.callback_query_handler(lambda c: c.data == 'start_megatest')
async def start_megatest(callback_query: types.CallbackQuery):
    message_id = callback_query.message.message_id
    chat_id = callback_query.from_user.id

    random_question = random.choice(questions)
    question_text = random_question['question']
    options = random_question['options']
    correct_answer = random_question['correct_answer']

    keyboard = InlineKeyboardMarkup(row_width=2)
    for option in options:
        callback_data = f"{option}+{correct_answer}" if option == correct_answer else f"{option}+"
        keyboard.add(InlineKeyboardButton(option, callback_data=callback_data))
    keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='start'))

    await bot.edit_message_media(chat_id=chat_id,
                                 message_id=message_id,
                                 media=types.InputMediaPhoto(media=open('megatest.jpg', 'rb'),
                                 caption=f"<b>{question_text}</b>",
                                 parse_mode='HTML'),
                                 reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: '+' in c.data)
async def check_correct_answer(callback_query: types.CallbackQuery):
    option, correct_answer = callback_query.data.split('+')
    message_id = callback_query.message.message_id
    user_id = callback_query.from_user.id

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞', callback_data='start_megatest'))
    keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='start'))

    if option == correct_answer:
        text = '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–≥–∞–¥–∞–ª!</b>\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?'
        await win(user_id, 'megatest')
    else:
        text = '<b>–¢—ã –Ω–µ —É–≥–∞–¥–∞–ª!</b>\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?'

    await bot.edit_message_media(chat_id=user_id,
                                     message_id=message_id,
                                     media=types.InputMediaPhoto(media=open('megatest.jpg', 'rb'),
                                     caption=text,
                                     parse_mode='HTML'),
                                     reply_markup=keyboard
        )