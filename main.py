from games import *
from db import *

@dp.message_handler(commands=['start'])
async def start_game(message: types.Message):
    user_id = message.chat.id

    await new_user(user_id)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üßø –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data="tictactoe"),
        types.InlineKeyboardButton("‚úÇÔ∏è –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞", callback_data="kmn"),
        types.InlineKeyboardButton("üé∞Ô∏è –°–ª–æ—Ç—ã", callback_data="sloti"),
        types.InlineKeyboardButton("üêä –ö—Ä–æ–∫–æ–¥–∏–ª", callback_data="krokodil"),
        types.InlineKeyboardButton("üèÉ‚Äç –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="pravda"),
        types.InlineKeyboardButton("ü™ô‚Äç –û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞", callback_data="flip"),
        types.InlineKeyboardButton("üí£ –°–∞–ø–µ—Ä", callback_data="saper"),
        types.InlineKeyboardButton("üßë‚Äçüíª –ú–µ–≥–∞—Ç–µ—Å—Ç", callback_data="megatest"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat")
    ]
    keyboard.add(*buttons)

    await bot.send_photo(
        chat_id=user_id,
        photo=open('menu.jpg', 'rb'),
        caption='<b>–ú–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É:',
        parse_mode='HTML',
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'start')
async def start_callback(callback_query: types.CallbackQuery):
    message_id = callback_query.message.message_id
    user_id = callback_query.from_user.id

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        types.InlineKeyboardButton("üßø –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏", callback_data="tictactoe"),
        types.InlineKeyboardButton("‚úÇÔ∏è –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞", callback_data="kmn"),
        types.InlineKeyboardButton("üé∞Ô∏è –°–ª–æ—Ç—ã", callback_data="sloti"),
        types.InlineKeyboardButton("üêä –ö—Ä–æ–∫–æ–¥–∏–ª", callback_data="krokodil"),
        types.InlineKeyboardButton("üèÉ‚Äç –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="pravda"),
        types.InlineKeyboardButton("ü™ô‚Äç –û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞", callback_data="flip"),
        types.InlineKeyboardButton("üí£ –°–∞–ø–µ—Ä", callback_data="saper"),
        types.InlineKeyboardButton("üßë‚Äçüíª –ú–µ–≥–∞—Ç–µ—Å—Ç", callback_data="megatest"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stat")
    ]
    keyboard.add(*buttons)

    await bot.edit_message_media(chat_id=user_id,
                                 message_id=message_id,
                                 media=types.InputMediaPhoto(media=open('menu.jpg', 'rb'),
                                 caption="<b>–ú–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–µ—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É:",
                                 parse_mode='HTML'),
                                 reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'stat')
async def stat(callback_query: types.CallbackQuery):
    message_id = callback_query.message.message_id
    user_id = callback_query.from_user.id

    xo_wins, sloti_wins, rocks_wins, pravda_wins, krokodil_wins, megatest_wins, flip_wins, saper_wins = await get_wins(user_id)

    stats_message = (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º</b>\n\n"
        f"–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏: {xo_wins} –ø–æ–±–µ–¥\n"
        f"–°–ª–æ—Ç—ã: {sloti_wins} –ø–æ–±–µ–¥\n"
        f"–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞: {rocks_wins} –ø–æ–±–µ–¥\n"
        f"–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ: {pravda_wins} –ø–æ–±–µ–¥\n"
        f"–ö—Ä–æ–∫–æ–¥–∏–ª: {krokodil_wins} –ø–æ–±–µ–¥\n"
        f"–ú–µ–≥–∞—Ç–µ—Å—Ç: {megatest_wins} –ø–æ–±–µ–¥\n"
        f"–û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞: {flip_wins} –ø–æ–±–µ–¥\n"
        f"–°–∞–ø–µ—Ä: {saper_wins} –ø–æ–±–µ–¥"
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='start'))

    await bot.edit_message_media(
        chat_id=user_id,
        message_id=message_id,
        media=types.InputMediaPhoto(media=open('stat.jpg', 'rb'),
        caption=stats_message,
        parse_mode='HTML'),
        reply_markup=keyboard
    )

async def restart_bot():
    os.execl(sys.executable, sys.executable, *sys.argv)

@dp.message_handler(commands=['restart'])
async def restart_command(message: types.Message):
    await message.reply("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
    print('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫')
    await restart_bot()

@dp.message_handler(content_types=['text'])
async def echo(message: types.Message):
    await message.reply("–Ø –±–æ—Ç –∏ –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)